name: Apply patch from issue or manual trigger

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      patch_url:
        description: "URL to .patch OR repo://path"
        required: true
      target_branch:
        description: "Base branch"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.title, '[patch]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - name: Mark workspace as safe
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Determine base branch
        id: base
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.target_branch }}" ]; then
            echo "branch=${{ github.event.inputs.target_branch }}" >> "$GITHUB_OUTPUT"
          else
            echo "branch=${{ github.event.repository.default_branch }}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using base branch: $(cat $GITHUB_OUTPUT)"

      - name: Extract patch URL or repo path
        id: extract
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            body="${{ github.event.issue.body }}"
            url=$(echo "$body" | head -n1 | tr -d '\r')
          else
            url="${{ github.event.inputs.patch_url }}"
          fi
          if [[ "$url" == repo://* ]]; then
            echo "mode=repo" >> "$GITHUB_OUTPUT"
            echo "path=${url#repo://}" >> "$GITHUB_OUTPUT"
            echo "Using repo patch: ${url#repo://}"
          else
            echo "mode=url" >> "$GITHUB_OUTPUT"
            echo "url=$url" >> "$GITHUB_OUTPUT"
            echo "Using URL patch: $url"
          fi

      - name: Use repo patch
        if: steps.extract.outputs.mode == 'repo'
        run: |
          test -f "${{ steps.extract.outputs.path }}" || { echo "Patch not found: ${{ steps.extract.outputs.path }}"; exit 1; }
          cp "${{ steps.extract.outputs.path }}" change.patch
          echo "Repo patch size: $(wc -c < change.patch) bytes"
          head -n 20 change.patch || true

      - name: Download patch (only for URL mode)
        if: steps.extract.outputs.mode == 'url'
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ steps.extract.outputs.url }}"
          echo "Will fetch: $URL"
          for i in {1..3}; do
            if curl -I -LfsS "$URL" >/dev/null; then break; fi
            echo "HEAD attempt $i failed; retrying..."; sleep 2
          done
          for i in {1..5}; do
            if curl -A "github-actions" -H "Accept: text/plain" -LfsS "$URL" -o change.patch; then break; fi
            echo "Download attempt $i failed; retrying..."; sleep 2
          done
          test -s change.patch || { echo "Download failed or empty file"; exit 1; }
          echo "Downloaded patch size: $(wc -c < change.patch) bytes"
          head -n 20 change.patch || true

      - name: Dry-run patch
        shell: bash
        run: |
          git status --porcelain
          git rev-parse --abbrev-ref HEAD
          git log -1 --oneline
          git apply --check change.patch

      - name: Apply patch and stage
        run: |
          git apply --whitespace=fix change.patch
          git add -A

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ steps.base.outputs.branch }}
          branch: gpt/auto-patch-${{ github.run_id }}
          title: "Auto PR: apply patch (${{ github.run_id }})"
          commit-message: "Apply patch via ${{ steps.extract.outputs.mode }}: ${{ steps.extract.outputs.path || steps.extract.outputs.url }}"
          body: |
            Generated by workflow.
            Source: ${{ steps.extract.outputs.mode }} ${{
              steps.extract.outputs.path || steps.extract.outputs.url
            }}
